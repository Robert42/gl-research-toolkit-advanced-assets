#include "uuids.as"
#include "common/textures/uuids.as"

void registerTextures(ResourceIndex@ index)
{
  TextureSampler samplerInterpolated;
  
  TextureImportSettings import_diff;
  import_diff.format = TextureFormat::RGB;
  import_diff.type = TextureType::UINT8;
  
  TextureImportSettings import_diff_with_mask;
  import_diff_with_mask.format = TextureFormat::RGBA;
  import_diff_with_mask.type = TextureType::INT8;
  import_diff_with_mask.alpha_channel_suffix = "_mask.png";
  import_diff_with_mask.merge_alpha_as_grey = true;
  
  TextureImportSettings import_bump;
  import_bump.format = TextureFormat::R;
  import_bump.type = TextureType::INT8;
  import_bump.remapSourceAsSigned = true;
  
  TextureImportSettings import_srmo_from_spec;
  import_srmo_from_spec.format = TextureFormat::RGBA;
  import_srmo_from_spec.type = TextureType::UINT8;
  import_srmo_from_spec.force_value.g = 0.5;
  import_srmo_from_spec.force_value.b = 0.0;
  import_srmo_from_spec.force_value.a = 1.0;
  import_srmo_from_spec.red_channel_suffix = "_spec.png";
  import_srmo_from_spec.merge_red_as_grey = true;
  
  TextureImportSettings import_srmo_from_spec_and_ao;
  import_srmo_from_spec_and_ao = import_srmo_from_spec;
  import_srmo_from_spec_and_ao.force_value.a = import_srmo_from_spec.force_value.r;
  import_srmo_from_spec_and_ao.alpha_channel_suffix = "_ao.png";
  import_srmo_from_spec_and_ao.merge_alpha_as_grey = true;
  
  TextureImportSettings import_srmo_from_spec_ref_and_ao;
  import_srmo_from_spec_ref_and_ao = import_srmo_from_spec_and_ao;
  import_srmo_from_spec_ref_and_ao.green_channel_suffix = "_ref.png";
  import_srmo_from_spec_ref_and_ao.force_value.g = import_srmo_from_spec_and_ao.force_value.r;
  import_srmo_from_spec_ref_and_ao.merge_green_as_grey;
  
  TextureImportSettings import_srmo_from_spec_and_metal;
  import_srmo_from_spec_and_metal.format = TextureFormat::RGBA;
  import_srmo_from_spec_and_metal.type = TextureType::UINT8;
  import_srmo_from_spec_and_metal.force_value.g = 0.5;
  import_srmo_from_spec_and_metal.force_value.a = 1.0;
  import_srmo_from_spec_and_metal.red_channel_suffix = "_spec.png";
  import_srmo_from_spec_and_metal.blue_channel_suffix = "_metal.png";
  import_srmo_from_spec_and_metal.merge_red_as_grey = true;
  import_srmo_from_spec_and_metal.merge_blue_as_grey = true;
  
  TextureImportSettings import_srmo_from_spec_as_metal;
  import_srmo_from_spec_as_metal.format = TextureFormat::RGBA;
  import_srmo_from_spec_as_metal.type = TextureType::UINT8;
    import_srmo_from_spec_as_metal.red_channel_suffix = "_spec.png";
    import_srmo_from_spec_as_metal.merge_red_as_grey = true;
  import_srmo_from_spec_as_metal.force_value.g = 0.5;
    import_srmo_from_spec_as_metal.blue_channel_suffix = "_spec.png";
    import_srmo_from_spec_as_metal.merge_blue_as_grey = true;
  import_srmo_from_spec_as_metal.force_value.a = 1.0;
  
  TextureImportSettings import_n;
  import_n.format = TextureFormat::RGB;
  import_n.type = TextureType::INT8;
  import_n.remapSourceAsSigned = true;
  
  TextureImportSettings import_n_inverted;
  import_n_inverted = import_n;
  import_n_inverted.factor.x = -1;
  import_n_inverted.factor.y = -1;
                            
  // spnza_details
  index.convertTexture(textureFile: "spnza_details_diff.texture", sourceFile: "textures/sponza_details_diff.png", settings: import_diff);
  //index.convertTexture(textureFile: "spnza_details_n.texture", sourceFile: "textures/sponza_details_ddn.png", settings: import_n);
  //index.convertTexture(textureFile: "spnza_details_bump.texture", sourceFile: "textures/sponza_details_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "spnza_details_srmo.texture", sourceFile: "textures/sponza_details_diff.png", settings: import_srmo_from_spec_and_metal);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_details_basic_color,
                            file: "spnza_details_diff.texture",
                            defaultSampler: samplerInterpolated);
  /*index.registerTextureFile(uuid: uuids::sponza::textures::spnza_details_n,
                            file: "spnza_details_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_details_bump,
                            file: "spnza_details_bump.texture",
                            defaultSampler: samplerInterpolated);*/
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_details_srmo,
                            file: "spnza_details_srmo.texture",
                            defaultSampler: samplerInterpolated);
                            
  // spnza_bricks
  index.convertTexture(textureFile: "spnza_bricks_a_diff.texture", sourceFile: "textures/spnza_bricks_a_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "spnza_bricks_a_n.texture", sourceFile: "textures/spnza_bricks_a_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "spnza_bricks_a_bump.texture", sourceFile: "textures/spnza_bricks_a_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "spnza_bricks_a_srmo.texture", sourceFile: "textures/spnza_bricks_a_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_bricks_a_basic_color,
                            file: "spnza_bricks_a_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_bricks_a_n,
                            file: "spnza_bricks_a_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_bricks_a_bump,
                            file: "spnza_bricks_a_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::spnza_bricks_a_srmo,
                            file: "spnza_bricks_a_srmo.texture",
                            defaultSampler: samplerInterpolated);
                            
                            
  // sponza_column_a
  index.convertTexture(textureFile: "sponza_column_a_diff.texture", sourceFile: "textures/sponza_column_a_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_column_a_n.texture", sourceFile: "textures/sponza_column_a_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_column_a_bump.texture", sourceFile: "textures/sponza_column_a_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_column_a_srmo.texture", sourceFile: "textures/sponza_column_a_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_a_basic_color,
                            file: "sponza_column_a_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_a_n,
                            file: "sponza_column_a_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_a_bump,
                            file: "sponza_column_a_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_a_srmo,
                            file: "sponza_column_a_srmo.texture",
                            defaultSampler: samplerInterpolated);
    
  // sponza_column_b
  index.convertTexture(textureFile: "sponza_column_b_diff.texture", sourceFile: "textures/sponza_column_b_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_column_b_n.texture", sourceFile: "textures/sponza_column_b_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_column_b_bump.texture", sourceFile: "textures/sponza_column_b_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_column_b_srmo.texture", sourceFile: "textures/sponza_column_b_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_b_basic_color,
                            file: "sponza_column_b_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_b_n,
                            file: "sponza_column_b_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_b_bump,
                            file: "sponza_column_b_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_b_srmo,
                            file: "sponza_column_b_srmo.texture",
                            defaultSampler: samplerInterpolated);
    
  // sponza_column_c
  index.convertTexture(textureFile: "sponza_column_c_diff.texture", sourceFile: "textures/sponza_column_c_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_column_c_n.texture", sourceFile: "textures/sponza_column_c_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_column_c_bump.texture", sourceFile: "textures/sponza_column_c_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_column_c_srmo.texture", sourceFile: "textures/sponza_column_c_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_c_basic_color,
                            file: "sponza_column_c_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_c_n,
                            file: "sponza_column_c_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_c_bump,
                            file: "sponza_column_c_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_column_c_srmo,
                            file: "sponza_column_c_srmo.texture",
                            defaultSampler: samplerInterpolated);
    
  // sponza_ceiling
  TextureImportSettings import_ceiling_bump;
  import_ceiling_bump = import_bump;
  import_ceiling_bump.remapSourceAsSigned = false;
  import_ceiling_bump.offset = vec4(-1);
  index.convertTexture(textureFile: "sponza_ceiling_a_diff.texture", sourceFile: "textures/sponza_ceiling_a_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_ceiling_a_n.texture", sourceFile: "textures/sponza_ceiling_a_n.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_ceiling_a_bump.texture", sourceFile: "textures/sponza_ceiling_a_bump.png", settings: import_ceiling_bump);
  index.convertTexture(textureFile: "sponza_ceiling_a_srmo.texture", sourceFile: "textures/sponza_ceiling_a_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_ceiling_a_basic_color,
                            file: "sponza_ceiling_a_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_ceiling_a_n,
                            file: "sponza_ceiling_a_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_ceiling_a_bump,
                            file: "sponza_ceiling_a_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_ceiling_a_srmo,
                            file: "sponza_ceiling_a_srmo.texture",
                            defaultSampler: samplerInterpolated);
                            
  // sponza_arch
  index.convertTexture(textureFile: "sponza_arch_diff.texture", sourceFile: "textures/sponza_arch_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_arch_n.texture", sourceFile: "textures/sponza_arch_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_arch_bump.texture", sourceFile: "textures/sponza_arch_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_arch_srmo.texture", sourceFile: "textures/sponza_arch_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_arch_basic_color,
                            file: "sponza_arch_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_arch_n,
                            file: "sponza_arch_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_arch_bump,
                            file: "sponza_arch_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_arch_srmo,
                            file: "sponza_arch_srmo.texture",
                            defaultSampler: samplerInterpolated);
                            
  // sponza_roof
  index.convertTexture(textureFile: "sponza_roof_diff.texture", sourceFile: "textures/sponza_roof_diff.png", settings: import_diff);   
  //index.convertTexture(textureFile: "sponza_roof_n.texture", sourceFile: "textures/sponza_roof_ddn.png", settings: import_n);
  //index.convertTexture(textureFile: "sponza_roof_bump.texture", sourceFile: "textures/sponza_roof_bump.png", settings: import_bump);
  //index.convertTexture(textureFile: "sponza_roof_srmo.texture", sourceFile: "textures/sponza_roof_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_roof_basic_color,
                            file: "sponza_roof_diff.texture",
                            defaultSampler: samplerInterpolated);
  //index.registerTextureFile(uuid: uuids::sponza::textures::sponza_roof_n,
  //                          file: "sponza_roof_n.texture",
  //                          defaultSampler: samplerInterpolated);
  //index.registerTextureFile(uuid: uuids::sponza::textures::sponza_roof_bump,
  //                          file: "sponza_roof_bump.texture",
  //                          defaultSampler: samplerInterpolated);
  //index.registerTextureFile(uuid: uuids::sponza::textures::sponza_roof_srmo,
  //                          file: "sponza_roof_srmo.texture",
  //                          defaultSampler: samplerInterpolated);
  
  // sponza_floor_a
  index.convertTexture(textureFile: "sponza_floor_a_diff.texture", sourceFile: "textures/sponza_floor_a_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "sponza_floor_a_n.texture", sourceFile: "textures/sponza_floor_a_n.png", settings: import_n);
  index.convertTexture(textureFile: "sponza_floor_a_bump.texture", sourceFile: "textures/sponza_floor_a_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_floor_a_srmo.texture", sourceFile: "textures/sponza_floor_a_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_floor_a_basic_color,
                            file: "sponza_floor_a_diff.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_floor_a_n,
                            file: "sponza_floor_a_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_floor_a_bump,
                            file: "sponza_floor_a_bump.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_floor_a_srmo,
                            file: "sponza_floor_a_srmo.texture",
                            defaultSampler: samplerInterpolated);
                            
  // sponza_flagpole
  index.convertTexture(textureFile: "sponza_flagpole_diff.texture", sourceFile: "textures/sponza_flagpole_diff.png", settings: import_diff);   
  //index.convertTexture(textureFile: "sponza_flagpole_n.texture", sourceFile: "textures/sponza_flagpole_ddn.png", settings: import_n);
  //index.convertTexture(textureFile: "sponza_flagpole_bump.texture", sourceFile: "textures/sponza_flagpole_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "sponza_flagpole_srmo.texture", sourceFile: "textures/sponza_flagpole_diff.png", settings: import_srmo_from_spec_as_metal);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_flagpole_basic_color,
                            file: "sponza_flagpole_diff.texture",
                            defaultSampler: samplerInterpolated);
  /*index.registerTextureFile(uuid: uuids::sponza::textures::sponza_flagpole_n,
                            file: "sponza_flagpole_n.texture",
                            defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_flagpole_bump,
                            file: "sponza_flagpole_bump.texture",
                            defaultSampler: samplerInterpolated);*/
  index.registerTextureFile(uuid: uuids::sponza::textures::sponza_flagpole_srmo,
                            file: "sponza_flagpole_srmo.texture",
                            defaultSampler: samplerInterpolated);
            
  // vase_hanging
  index.convertTexture(textureFile: "vase_hanging_diff.texture", sourceFile: "textures/vase_hanging.png", settings: import_diff);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_hanging_basic_color,
                            file: "vase_hanging_diff.texture",
                            defaultSampler: samplerInterpolated);
  
  // chain
  index.convertTexture(textureFile: "chain_diff.texture", sourceFile: "textures/chain_texture_diff.png", settings: import_diff_with_mask);   
  index.convertTexture(textureFile: "chain_n.texture", sourceFile: "textures/chain_texture_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "chain_bump.texture", sourceFile: "textures/chain_texture_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "chain_srmo.texture", sourceFile: "textures/chain_texture_diff.png", settings: import_srmo_from_spec_ref_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::chain_basic_color,
    file: "chain_diff.texture",
    defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::chain_n,
    file: "chain_n.texture",
    defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::chain_bump,
    file: "chain_bump.texture",
    defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::chain_srmo,
    file: "chain_srmo.texture",
    defaultSampler: samplerInterpolated);
    

  // vase
  index.convertTexture(textureFile: "vase_diff.texture", sourceFile: "textures/vase_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "vase_n.texture", sourceFile: "textures/vase_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "vase_bump.texture", sourceFile: "textures/vase_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "vase_srmo.texture", sourceFile: "textures/vase_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_basic_color,
      file: "vase_diff.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_n,
      file: "vase_n.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_bump,
      file: "vase_bump.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_srmo,
      file: "vase_srmo.texture",
      defaultSampler: samplerInterpolated);
      

  // vase_round
  index.convertTexture(textureFile: "vase_round_diff.texture", sourceFile: "textures/vase_round_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "vase_round_n.texture", sourceFile: "textures/vase_round_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "vase_round_bump.texture", sourceFile: "textures/vase_round_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "vase_round_srmo.texture", sourceFile: "textures/vase_round_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_round_basic_color,
      file: "vase_round_diff.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_round_n,
      file: "vase_round_n.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_round_bump,
      file: "vase_round_bump.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_round_srmo,
      file: "vase_round_srmo.texture",
      defaultSampler: samplerInterpolated);

  // vase_foliage
  index.convertTexture(textureFile: "vase_plant_diff.texture", sourceFile: "textures/vase_plant_diff.png", settings: import_diff_with_mask);   
  //index.convertTexture(textureFile: "vase_plant_n.texture", sourceFile: "textures/vase_plant_diff.png", settings: import_n);
  //index.convertTexture(textureFile: "vase_plant_bump.texture", sourceFile: "textures/vase_plant_diff.png", settings: import_bump);
  index.convertTexture(textureFile: "vase_plant_srmo.texture", sourceFile: "textures/vase_plant_diff.png", settings: import_srmo_from_spec);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_plant_basic_color,
    file: "vase_plant_diff.texture",
    defaultSampler: samplerInterpolated);
  /*index.registerTextureFile(uuid: uuids::sponza::textures::vase_plant_n,
    file: "vase_plant_n.texture",
    defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_plant_bump,
    file: "vase_plant_bump.texture",
    defaultSampler: samplerInterpolated);*/
  index.registerTextureFile(uuid: uuids::sponza::textures::vase_plant_srmo,
    file: "vase_plant_srmo.texture",
    defaultSampler: samplerInterpolated);
      
  // fabric
  TextureImportSettings import_srmo_fabric;
  import_srmo_fabric.format = TextureFormat::RGBA;
  import_srmo_fabric.type = TextureType::UINT8;
  import_srmo_fabric.red_channel_suffix = "_spec.png";
  import_srmo_fabric.merge_red_as_grey = true;
  import_srmo_fabric.force_value.g = 0.5;
  import_srmo_fabric.blue_channel_suffix = "_metallic.png";
  import_srmo_fabric.merge_blue_as_grey = true;
  import_srmo_fabric.force_value.a = 1.0;
  index.convertTexture(textureFile: "sponza_fabric_red_color.texture", sourceFile: "textures/sponza_fabric_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_fabric_green_color.texture", sourceFile: "textures/sponza_fabric_green_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_fabric_blue_color.texture", sourceFile: "textures/sponza_fabric_blue_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_fabric_srmo.texture", sourceFile: "textures/sponza_fabric_spec.png", settings: import_srmo_fabric);
  
  TextureImportSettings import_srmo_curtain;
  import_srmo_curtain = import_srmo_fabric;
  import_srmo_curtain.red_channel_suffix = "_spec.png";
  index.convertTexture(textureFile: "sponza_curtain_red_color.texture", sourceFile: "textures/sponza_curtain_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_curtain_green_color.texture", sourceFile: "textures/sponza_curtain_green_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_curtain_blue_color.texture", sourceFile: "textures/sponza_curtain_blue_diff.png", settings: import_diff);
  index.convertTexture(textureFile: "sponza_curtain_srmo.texture", sourceFile: "textures/sponza_curtain_spec.png", settings: import_srmo_curtain);
  
  index.registerTextureFile(uuid: uuids::sponza::textures::fabric_red_color, file: "sponza_fabric_red_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::fabric_green_color, file: "sponza_fabric_green_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::fabric_blue_color, file: "sponza_fabric_blue_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::fabric_srmo, file: "sponza_fabric_srmo.texture", defaultSampler: samplerInterpolated);
  
  index.registerTextureFile(uuid: uuids::sponza::textures::curtain_red_color, file: "sponza_curtain_red_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::curtain_green_color, file: "sponza_curtain_green_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::curtain_blue_color, file: "sponza_curtain_blue_color.texture", defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::curtain_srmo, file: "sponza_curtain_srmo.texture", defaultSampler: samplerInterpolated);
  
  // leaf
  index.convertTexture(textureFile: "thorn_basic_color.texture", sourceFile: "textures/sponza_thorn_diff.png", settings: import_diff_with_mask);   
  index.convertTexture(textureFile: "thorn_ddn.texture", sourceFile: "textures/sponza_thorn_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "thorn_bump.texture", sourceFile: "textures/sponza_thorn_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "thorn_srmo.texture", sourceFile: "textures/sponza_thorn_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::leaf_basic_color,
      file: "thorn_basic_color.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures:: leaf_n,
      file: "thorn_ddn.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures:: leaf_bump,
      file: "thorn_bump.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures:: leaf_srmo,
      file: "thorn_srmo.texture",
      defaultSampler: samplerInterpolated);
      
  // lion_shield
  index.convertTexture(textureFile: "lion_diff.texture", sourceFile: "textures/lion_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "lion_n.texture", sourceFile: "textures/lion_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "lion_bump.texture", sourceFile: "textures/lion_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "lion_srmo.texture", sourceFile: "textures/lion_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_basic_color,
      file: "lion_diff.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_n,
      file: "lion_n.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_bump,
      file: "lion_bump.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_srmo,
      file: "lion_srmo.texture",
      defaultSampler: samplerInterpolated);
      
  // lion
  index.convertTexture(textureFile: "lion_shield_diff.texture", sourceFile: "textures/lion_shield_diff.png", settings: import_diff);   
  index.convertTexture(textureFile: "lion_shield_n.texture", sourceFile: "textures/lion_shield_ddn.png", settings: import_n);
  index.convertTexture(textureFile: "lion_shield_bump.texture", sourceFile: "textures/lion_shield_bump.png", settings: import_bump);
  index.convertTexture(textureFile: "lion_shield_srmo.texture", sourceFile: "textures/lion_shield_diff.png", settings: import_srmo_from_spec_and_ao);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_shield_basic_color,
      file: "lion_shield_diff.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_shield_n,
      file: "lion_shield_n.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_shield_bump,
      file: "lion_shield_bump.texture",
      defaultSampler: samplerInterpolated);
  index.registerTextureFile(uuid: uuids::sponza::textures::lion_shield_srmo,
      file: "lion_shield_srmo.texture",
      defaultSampler: samplerInterpolated);
}

void registerMaterials(ResourceIndex@ index)
{  
  PlainColorMaterial debuggingText;
  debuggingText.base_color = vec3(0);
  debuggingText.emission = vec3(1);
  
  
  TexturedMaterial details_material;
  details_material.basecolor_map = TextureHandle(uuids::sponza::textures::spnza_details_basic_color);
  //details_material.normal_map = TextureHandle(uuids::sponza::textures::spnza_details_n);
  //details_material.height_map = TextureHandle(uuids::sponza::textures::spnza_details_bump);
  details_material.srmo_map = TextureHandle(uuids::sponza::textures::spnza_details_srmo);
  details_material.srmo_range_0 = vec4(0.0, 0, 0, 0.00);
  details_material.srmo_range_1 = vec4(0.5, 1, 1, 1.00);
  index.registerMaterial(uuid: uuids::sponza::materials::details,
                         material: details_material);
                         
  TexturedMaterial bricks_material;
  bricks_material.basecolor_map = TextureHandle(uuids::sponza::textures::spnza_bricks_a_basic_color);
  bricks_material.normal_map = TextureHandle(uuids::sponza::textures::spnza_bricks_a_n);
  bricks_material.height_map = TextureHandle(uuids::sponza::textures::spnza_bricks_a_bump);
  bricks_material.srmo_map = TextureHandle(uuids::sponza::textures::spnza_bricks_a_srmo);
  bricks_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  bricks_material.srmo_range_1 = vec4(0.75, 1, 1, 1);
  index.registerMaterial(uuid: uuids::sponza::materials::bricks,
                         material: bricks_material);
                         
  TexturedMaterial column_a_material;
  column_a_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_column_a_basic_color);
  column_a_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_column_a_n);
  column_a_material.height_map = TextureHandle(uuids::sponza::textures::sponza_column_a_bump);
  column_a_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_column_a_srmo);
  column_a_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  column_a_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::column_a,
                         material: column_a_material);
                         
  TexturedMaterial column_b_material;
  column_b_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_column_b_basic_color);
  column_b_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_column_b_n);
  column_b_material.height_map = TextureHandle(uuids::sponza::textures::sponza_column_b_bump);
  column_b_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_column_b_srmo);
  column_b_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  column_b_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::column_b,
                         material: column_b_material);
                         
  TexturedMaterial column_c_material;
  column_c_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_column_c_basic_color);
  column_c_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_column_c_n);
  column_c_material.height_map = TextureHandle(uuids::sponza::textures::sponza_column_c_bump);
  column_c_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_column_c_srmo);
  column_c_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  column_c_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::column_c,
                         material: column_c_material);
                         
  TexturedMaterial ceiling_a_material;
  ceiling_a_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_ceiling_a_basic_color);
  ceiling_a_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_ceiling_a_n);
  ceiling_a_material.height_map = TextureHandle(uuids::sponza::textures::sponza_ceiling_a_bump);
  ceiling_a_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_ceiling_a_srmo);
  ceiling_a_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  ceiling_a_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::ceiling,
                         material: ceiling_a_material);
                         
  TexturedMaterial arch_material;
  arch_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_arch_basic_color);
  arch_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_arch_n);
  arch_material.height_map = TextureHandle(uuids::sponza::textures::sponza_arch_bump);
  arch_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_arch_srmo);
  arch_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  arch_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::arch,
                         material: arch_material);
                         
  TexturedMaterial roof_material;
  roof_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_roof_basic_color);
  //roof_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_roof_n);
  //roof_material.height_map = TextureHandle(uuids::sponza::textures::sponza_roof_bump);
  //roof_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_roof_srmo);
  roof_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  roof_material.srmo_range_1 = vec4(0.75, 1, 1, 1);  
  index.registerMaterial(uuid: uuids::sponza::materials::roof,
                        material: roof_material);
                         
  TexturedMaterial floor_material;
  floor_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_floor_a_basic_color);
  floor_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_floor_a_n);
  floor_material.height_map = TextureHandle(uuids::sponza::textures::sponza_floor_a_bump);
  floor_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_floor_a_srmo);
  floor_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  floor_material.srmo_range_1 = vec4(0.75, 1, 1, 1);                     
  index.registerMaterial(uuid: uuids::sponza::materials::floor,
                         material: floor_material);
                         
  TexturedMaterial flagpole_material;
  flagpole_material.basecolor_map = TextureHandle(uuids::sponza::textures::sponza_flagpole_basic_color);
  //flagpole_material.normal_map = TextureHandle(uuids::sponza::textures::sponza_flagpole_n);
  //flagpole_material.height_map = TextureHandle(uuids::sponza::textures::sponza_flagpole_bump);
  flagpole_material.srmo_map = TextureHandle(uuids::sponza::textures::sponza_flagpole_srmo);
  flagpole_material.srmo_range_0 = vec4(0.25, 0, 0.75, 0);
  flagpole_material.srmo_range_1 = vec4(0.8, 1, 1, 1);
  index.registerMaterial(uuid: uuids::sponza::materials::flagpole,
                         material: flagpole_material);

  TexturedMaterial vase_hanging_material;
  vase_hanging_material.basecolor_map = TextureHandle(uuids::sponza::textures::vase_hanging_basic_color);
  vase_hanging_material.normal_map = TextureHandle(uuids::sponza::textures::vase_round_n);
  vase_hanging_material.height_map = TextureHandle(uuids::sponza::textures::vase_round_bump);
  vase_hanging_material.srmo_map = TextureHandle(uuids::sponza::textures::vase_round_srmo);
  vase_hanging_material.srmo_range_0 = vec4(0.25, 0, 1, 0);
  vase_hanging_material.srmo_range_1 = vec4(0.75, 1, 1, 1); 
  index.registerMaterial(uuid: uuids::sponza::materials::vase_hanging,
                         material: vase_hanging_material);
                         
  TexturedMaterial chain_material;
  chain_material.basecolor_map = TextureHandle(uuids::sponza::textures::chain_basic_color);
  chain_material.normal_map = TextureHandle(uuids::sponza::textures::chain_n);
  chain_material.height_map = TextureHandle(uuids::sponza::textures::chain_bump);
  chain_material.srmo_map = TextureHandle(uuids::sponza::textures::chain_srmo);
  chain_material.masked = true;
  chain_material.two_sided = true;
  chain_material.srmo_range_0 = vec4(0.25, 0.5, 1, 0);
  chain_material.srmo_range_1 = vec4(0.8, 1, 1, 1);
  index.registerMaterial(uuid: uuids::sponza::materials::chain,
                         material: chain_material);
                         
  TexturedMaterial vase_material;
  vase_material.basecolor_map = TextureHandle(uuids::sponza::textures::vase_basic_color);
  vase_material.normal_map = TextureHandle(uuids::sponza::textures::vase_n);
  vase_material.height_map = TextureHandle(uuids::sponza::textures::vase_bump);
  vase_material.srmo_map = TextureHandle(uuids::sponza::textures::vase_srmo);
  vase_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  vase_material.srmo_range_1 = vec4(0.75, 1, 1, 1); 
  index.registerMaterial(uuid: uuids::sponza::materials::vase,
                         material: vase_material);
                         
  TexturedMaterial vase_round_material;
  vase_round_material.basecolor_map = TextureHandle(uuids::sponza::textures::vase_round_basic_color);
  vase_round_material.normal_map = TextureHandle(uuids::sponza::textures::vase_round_n);
  vase_round_material.height_map = TextureHandle(uuids::sponza::textures::vase_round_bump);
  vase_round_material.srmo_map = TextureHandle(uuids::sponza::textures::vase_round_srmo);
  vase_round_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  vase_round_material.srmo_range_1 = vec4(0.75, 1, 1, 1); 
  index.registerMaterial(uuid: uuids::sponza::materials::vase_round,
                         material: vase_round_material);
                         
  TexturedMaterial vase_foliage_material;
  vase_foliage_material.masked = true;
  vase_foliage_material.two_sided = true;
  vase_foliage_material.basecolor_map = TextureHandle(uuids::sponza::textures::vase_plant_basic_color);
  vase_foliage_material.srmo_map = TextureHandle(uuids::sponza::textures::vase_plant_srmo);
  vase_foliage_material.srmo_range_0 = vec4(0.25, 0, 0, 0);
  vase_foliage_material.srmo_range_1 = vec4(0.80, 1, 1, 1); 
  index.registerMaterial(uuid: uuids::sponza::materials::vase_foliage,
                         material: vase_foliage_material);
  
  TexturedMaterial fabric_red;
  fabric_red.basecolor_map = TextureHandle(uuids::sponza::textures::fabric_red_color);
  fabric_red.srmo_map = TextureHandle(uuids::sponza::textures::fabric_srmo);
  fabric_red.srmo_range_0 = vec4(0.00, 0, 0, 0);
  fabric_red.srmo_range_1 = vec4(0.80, 1, 1, 1); 
  index.registerMaterial(uuid: uuids::sponza::materials::fabric_red,
                         material: fabric_red);
  
  TexturedMaterial fabric_green;
  fabric_green = fabric_red;
  fabric_green.basecolor_map = TextureHandle(uuids::sponza::textures::fabric_green_color);
  index.registerMaterial(uuid: uuids::sponza::materials::fabric_green,
                         material: fabric_green);
  
  TexturedMaterial fabric_blue;
  fabric_blue = fabric_red;
  fabric_blue.basecolor_map = TextureHandle(uuids::sponza::textures::fabric_blue_color);
  index.registerMaterial(uuid: uuids::sponza::materials::fabric_blue,
                         material: fabric_blue);
  
  TexturedMaterial curtain_red;
  curtain_red = fabric_red;
  curtain_red.basecolor_map = TextureHandle(uuids::sponza::textures::curtain_red_color);
  curtain_red.srmo_map = TextureHandle(uuids::sponza::textures::curtain_srmo);
  index.registerMaterial(uuid: uuids::sponza::materials::curtain_red,
                         material: curtain_red);
  
  TexturedMaterial curtain_green;
  curtain_green = curtain_red;
  curtain_green.basecolor_map = TextureHandle(uuids::sponza::textures::curtain_green_color);
  index.registerMaterial(uuid: uuids::sponza::materials::curtain_green,
                         material: curtain_green);
                         
  TexturedMaterial curtain_blue;
  curtain_blue = curtain_red;
  curtain_blue.basecolor_map = TextureHandle(uuids::sponza::textures::curtain_blue_color);
  index.registerMaterial(uuid: uuids::sponza::materials::curtain_blue,
                         material: curtain_blue);
  
  TexturedMaterial leaf_material;
  leaf_material.masked = true;
  leaf_material.two_sided = true;
  leaf_material.basecolor_map = TextureHandle(uuids::sponza::textures::leaf_basic_color);
  leaf_material.normal_map = TextureHandle(uuids::sponza::textures::leaf_n);
  leaf_material.height_map = TextureHandle(uuids::sponza::textures::leaf_bump);
  leaf_material.srmo_map = TextureHandle(uuids::sponza::textures::leaf_srmo);
  index.registerMaterial(uuid: uuids::sponza::materials::leaf,
                         material: leaf_material);
  
  TexturedMaterial lion_shield_material;
  lion_shield_material.basecolor_map = TextureHandle(uuids::sponza::textures::lion_shield_basic_color);
  lion_shield_material.normal_map = TextureHandle(uuids::sponza::textures::lion_shield_n);
  lion_shield_material.height_map = TextureHandle(uuids::sponza::textures::lion_shield_bump);
  lion_shield_material.srmo_map = TextureHandle(uuids::sponza::textures::lion_shield_srmo);
  index.registerMaterial(uuid: uuids::sponza::materials::lion_shield,
                         material: lion_shield_material);
  
  TexturedMaterial lion_material;
  lion_material.basecolor_map = TextureHandle(uuids::sponza::textures::lion_basic_color);
  lion_material.normal_map = TextureHandle(uuids::sponza::textures::lion_n);
  lion_material.height_map = TextureHandle(uuids::sponza::textures::lion_bump);
  lion_material.srmo_map = TextureHandle(uuids::sponza::textures::lion_srmo);
  index.registerMaterial(uuid: uuids::sponza::materials::lion,
                         material: lion_material);
                         
  PlainColorMaterial strange_plate_material;
  strange_plate_material.base_color = vec3(1);
  strange_plate_material.emission = vec3(0);
  index.registerMaterial(uuid: uuids::sponza::materials::strange_plate,
                         material: strange_plate_material);
  
  
  TexturedMaterial material_test;
  material_test.masked = true;
  material_test.two_sided = true;
  material_test.basecolor_map = TextureHandle(uuids::textures::transparency_text);
  index.registerMaterial(uuid: uuids::sponza::materials::material_test,
                         material: material_test);
  
  index.registerMaterial(uuid: uuids::sponza::materials::texture_frame_test,
                         material: debuggingText);
}

void registerScene(ResourceIndex@ index)
{
  SceneGraphImportSettings importSettings;
  
  array<string> twoSidedMeshes = {"sponza\\-lamp\\-mounting",
                                  "sponza\\-upper\\-wall$"};
  importSettings.meshesToVoxelizeTwoSided = twoSidedMeshes;
  
  array<string> meshesToVoxelizeWithManifold = {"sponza_vase_round"};
  importSettings.meshesToVoxelizeWithManifold = meshesToVoxelizeWithManifold;
  
  array<string> meshesToVoxelize_empty = {};
  array<string> meshesToVoxelize_all = {".*"};
  importSettings.meshesToVoxelize = meshesToVoxelize_all;
  
  array<string> meshesNotToVoxelize = {".*roof.*",
                                       ".*seperator.*",
                                       ".*ceiling.*",
                                       ".*arch\\-balcony.*",
                                       ".*ground.*",
                                       ".*armrest.*",
                                       "sponza\\-arch\\-lower",
                                       "sponza\\-fake\\-background\\-for\\-upper\\-windows",
                                       "sponza\\-outest\\-walls",
                                       "sponza\\-balkony\\-wall",
                                       "sponza\\-first\\-floor\\-wall",
                                       "sponza\\-balkony\\-inner\\-wall",
                                       "sponza\\-balkony\\-upper\\-inner\\-wall",
                                       "sponza\\-balkony\\-outer\\-wall",
                                       "sponza\\-balkony\\-upper\\-outer\\-wall",
                                       "sponza\\-upper\\-wall",
                                       "sponza\\-strange\\-walls\\-I\\-dont\\-know\\-why\\-they\\-are\\-there"};
  importSettings.meshesNotToVoxelize = meshesNotToVoxelize;
  importSettings.meshVoxelizeScaleFactors["sponza\\-floor"] = 2;
  
  //importSettings.voxelizationMeshDummies["sponza\\-floor"] = uuids::sponza::meshes::voxelisationDummies::sponzaBuilding;
  
  importSettings.materialUuids['details'] = uuids::sponza::materials::details;
  importSettings.materialUuids['bricks'] = uuids::sponza::materials::bricks;
  importSettings.materialUuids['column_a'] = uuids::sponza::materials::column_a;
  importSettings.materialUuids['column_b'] = uuids::sponza::materials::column_b;
  importSettings.materialUuids['column_c'] = uuids::sponza::materials::column_c;
  importSettings.materialUuids['ceiling'] = uuids::sponza::materials::ceiling;
  importSettings.materialUuids['arch'] = uuids::sponza::materials::arch;
  importSettings.materialUuids['roof'] = uuids::sponza::materials::roof;
  importSettings.materialUuids['floor'] = uuids::sponza::materials::floor;
  importSettings.materialUuids['flagpole'] = uuids::sponza::materials::flagpole;
  importSettings.materialUuids['vase_hanging'] = uuids::sponza::materials::vase_hanging;
  importSettings.materialUuids['chain'] = uuids::sponza::materials::chain;
  importSettings.materialUuids['vase'] = uuids::sponza::materials::vase;
  importSettings.materialUuids['vase_round'] = uuids::sponza::materials::vase_round;
  importSettings.materialUuids['vase_foliage'] = uuids::sponza::materials::vase_foliage;
  importSettings.materialUuids['fabric_red'] = uuids::sponza::materials::fabric_red;
  importSettings.materialUuids['fabric_green'] = uuids::sponza::materials::fabric_green;
  importSettings.materialUuids['fabric_blue'] = uuids::sponza::materials::fabric_blue;
  importSettings.materialUuids['curtain_red'] = uuids::sponza::materials::curtain_red;
  importSettings.materialUuids['curtain_green'] = uuids::sponza::materials::curtain_green;
  importSettings.materialUuids['curtain_blue'] = uuids::sponza::materials::curtain_blue;
  importSettings.materialUuids['leaf'] = uuids::sponza::materials::leaf;
  importSettings.materialUuids['lion_shield'] = uuids::sponza::materials::lion_shield;
  importSettings.materialUuids['lion'] = uuids::sponza::materials::lion;
  importSettings.materialUuids['strange-plate'] = uuids::sponza::materials::strange_plate;
  importSettings.materialUuids['material-test'] = uuids::sponza::materials::material_test;
  importSettings.materialUuids['texture-frame-text'] = uuids::sponza::materials::texture_frame_test;
  
  index.label[uuids::sponza::materials::details] = 'details';
  index.label[uuids::sponza::materials::bricks] = 'bricks';
  index.label[uuids::sponza::materials::column_a] = 'column_a';
  index.label[uuids::sponza::materials::column_b] = 'column_b';
  index.label[uuids::sponza::materials::column_c] = 'column_c';
  index.label[uuids::sponza::materials::ceiling] = 'ceiling';
  index.label[uuids::sponza::materials::arch] = 'arch';
  index.label[uuids::sponza::materials::roof] = 'roof';
  index.label[uuids::sponza::materials::floor] = 'floor';
  index.label[uuids::sponza::materials::flagpole] = 'flagpole';
  index.label[uuids::sponza::materials::vase_hanging] = 'vase_hanging';
  index.label[uuids::sponza::materials::chain] = 'chain';
  index.label[uuids::sponza::materials::vase] = 'vase';
  index.label[uuids::sponza::materials::vase_round] = 'vase_round';
  index.label[uuids::sponza::materials::vase_foliage] = 'vase_foliage';
  index.label[uuids::sponza::materials::fabric_red] = 'fabric_red';
  index.label[uuids::sponza::materials::fabric_green] = 'fabric_green';
  index.label[uuids::sponza::materials::fabric_blue] = 'fabric_blue';
  index.label[uuids::sponza::materials::curtain_red] = 'curtain_red';
  index.label[uuids::sponza::materials::curtain_green] = 'curtain_green';
  index.label[uuids::sponza::materials::curtain_blue] = 'curtain_blue';
  index.label[uuids::sponza::materials::leaf] = 'leaf';
  index.label[uuids::sponza::materials::lion_shield] = 'lion_shield';
  index.label[uuids::sponza::materials::lion] = 'lion';
  index.label[uuids::sponza::materials::strange_plate] = 'strange-plate';
  index.label[uuids::sponza::materials::material_test] = 'material-test';
  index.label[uuids::sponza::materials::texture_frame_test] = 'texture-frame-text';
    
  importSettings.cameraUuids['EyeHeight'] = uuids::sponza::cameras::eyeHeight;
  importSettings.lightUuids['Sun'] = uuids::sponza::lights::sunLight;
  
  index.convertSceneGraph(sceneGraphFile: "sponza-scenery.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "scenery",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "sponza-building.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "sponza-building",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "sponza-decoration.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "sponza-decoraton",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "sponza-fabrics.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "sponza-fabrics",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "sponza-foliage.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "sponza-foliage",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "sponza-unmovable-decoration.scene-graph",
                          sourceFile: "sponza.blend",
                          groupToImport: "sponza-unmovable-decoraton",
                          settings: importSettings);
  index.convertSceneGraph(sceneGraphFile: "texture-frame.scene-graph",
                          sourceFile: "sponza-debugging-helpers.blend",
                          groupToImport: "texture-frame",
                          settings: importSettings);
                          
                          
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_scenery,
                               file: "sponza-scenery.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_building,
                               file: "sponza-building.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_decoration,
                               file: "sponza-decoration.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_fabrics,
                               file: "sponza-fabrics.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_foliage,
                               file: "sponza-foliage.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_unmovable_decoration,
                               file: "sponza-unmovable-decoration.scene-layer");
  index.registerSceneLayerFile(uuid: uuids::sponza::sceneLayers::sponza_material_debugging,
                               file: "sponza-material-debugging.scene-layer");
  
  index.registerSceneFile(uuid: uuids::sponza::scenes::sponza_full,
                          file: "sponza-full.scene");
  index.registerSceneFile(uuid: uuids::sponza::scenes::sponza_no_foliage,
                          file: "sponza-no-foliage.scene");
}

void registerLights(ResourceIndex@ index)
{
  SphereAreaLightSource sphereAreaLight;
  sphereAreaLight.radius = 3.0;
  sphereAreaLight.luminous_power *= 10000000;
  
  index.registerLightSource(uuid: uuids::sponza::lights::sunLight,
                            light: sphereAreaLight);
}

void main(ResourceIndex@ index)
{
  registerTextures(index);
  //forceReimport=true;
  registerMaterials(index);
  registerScene(index);
  registerLights(index);
  //forceReimport=false;
}
